Проект состоит из четырёх основных классов:
typeRating, typeFood, food, restourant

использован файл с константами по аналогии с лабораторной с hero, экспепшены на минималках для удобной работы

У нас имеется основной класс ресторан, он содержит в себе пользователей, поваров, всю предлагаемую еду. Для удобства была создана вспомогательная структура link, принимает имя пользователя, имя повара, который ему готовил, полное описание еды, оценку.

Класс еды представляет из себя 3 множества. Кухни, типы, блюда. Этот подход сделан для высокой производительности, которая будет показана далее. Данный класс поддерживает обновление меню (добавить, удалить, изменить рейтинг еды), а так же метод для вывода меню с рейтингом.

Кухни и типы отличаются только названиями, по структуре они равны, это какие-то множетсва, с одинаковым устройством, было логично сделать для них прородителя, который получил название typeFood

typeFood:
содержит множество блюд, средний рейтинг множества, а так же количество оценок пользователей (без учёта спама) по всем.

Поддерживает изменения рейтинга одного блюда, добавление, удаление блюда, геттеры. Т.к. семантически данный класс имеет свойство слабого пересечения с другими, семантика сеттеров использована не была, легко расширяемо в случае правок

Имеет метод для распечатки множества, с рейтинграми блюд

Далее нас ждёт следующее наблюдение, у нас есть рейтинг у поваров и у блюд. Было принято решение создать класс, который даст обоим даный функционал, данный класс был назван typeRating

typeRating:
имеет поле имени, т.к. блюдо и повар - именованы
имеет рейтинг
имеет количество оценок

Как мы можем видеть, блюдо = повар в каком-то смысле, что оправдывает данный подход

Поддержка добавки рейтинга, удаления, геттеры, а так же метод распечатки. Напомню, методы возвращают код, который даёт представление о том, что происходит

Тонкости реализации:
Сделан пожизненный бан аккаунта после определённого количеста (определяемой константой) одинаковых оценок. Обновление каждой оценки требует логарифм операций относительно размера меню, персонала. Удаление рейтинга нужно было для бана пользователя, т.к. хранится всё, что пользователь ставил, кому, как, какому блюду, типу, кухни, т.е. link. Худший случай, когда каждый пользователь будет забанен, тогда операций будет logN * (n1 + n2 + .. + nk), ni - количество поставленных оценок i пользователем. Числа равны, если константа, расширяемо легко для динамического подхода. Видим, что амортизационная сложность на одну операцию составляет логарифм. Этим опрадывается сложная семантика в классе ресторана у поля _user
	замечание: c++14, подчёркивания слева

Код был сделан с идеей алгоритмической быстроты на пару с структурой, способной легко поддерживать изменений

Легко менять формулы пересчёта рейтинга
Легко сортировать крутости всего
Легко расширяемо до поиска определённых вещей в меню, будь то нужный рейтинг или названия

main:
показана реализация обработки спама, вывода данных, обработки заказов