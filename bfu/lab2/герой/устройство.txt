проект состоит из трёх основных классов
статы, абилки, герой

а так же файла констант, который выполняет роль кодов ошибки, но в более
удобном виде для программиста

вложенность следующая:

stat -> abil -> hero
stat -> hero

т.е. у нас ацикличный граф связей

роль stat:
1. описательный класс для высокоуровневых классов
2. содержит знание о себе (название, степень и предел)
3. содержит правило своего изменения (через указатель на функцию)
- замечание:
	не было использовано std::function, исправлено в последующих
	лабораторных, конкретно тут это не принципиально из-за иных
	целей задания

класс содержит в себе все сеттеры и геттеры для максимальной 
настраиваемости в случае отладок, тестировки.
- замечание:
	придерживается стиль константностей

определены операторы <, = для дальнейшего использования класса в 
контейнерах

роль abil:
1. основной функциональный класс
2. содержит знание о себе (имя, нужные статы)
3. содержит свою роль для игрового процесса (через указатель на функцию)

Особенности реализации:
	поддерживаются статы в set' e, данное оказалось проще иных
	вариантов. Аналогично присутствуют сеттеры геттеры всего для 
	более лёгкой обработки программы во время тестирования. 
	
	метод добавления статы для абилки возвращает код, который 
	даёт понимание, была ли эта статистика ранее добавлена или
	нет. Добавлено для более удобной обработки кода при тестировании

все функции старались привестись к работе с ссылками для более
высокой производительности, что и было реализовано за исключением 
некоторых незначительных

роль hero:
1. высокоуровневый класс для пользователя
2. содержит полное описание всевозможных характеристик, предусмотренных
логикой игры

Содержит по аналогии с абилками - сет статов и абилок, а методы их
добавления аналогично возвращают коды операции для удобства работы

main:
содержит в себе пример того, как добавляются статистики, абилки, а так
же функции их обработки